 <script src="scripts/jquery-ui.js"></script>
 <link rel="stylesheet" href="styles/custom-theme/jquery-ui-1.10.0.custom.css" />

<script type="text/javascript">
	//######### Constructor ##################
	var me;
	function SimpleViewer(imageDescriptor) {
		me = this;	
		
		this.images = new Array();
		this.mode = "stop";
		this.zoom = 1;
		this.width;
		this.height;
		
		//{uid: "sopInstanceUID", nFrames: 10, frameRate: 10}		
		this.sopInstanceUID = imageDescriptor.uid;
		this.numberOfFrames = imageDescriptor.nFrames;
		this.frameRate = imageDescriptor.frameRate;
		this.current = 0;
		
		$("#nFrames").text(numberOfFrames);
		$("#frameRate").text(frameRate);
		$("#cFrame").text(current);
		$("#collapseFour div").html("<div class=\"progress progress-striped active\"><div class=\"bar\"></div></div>");

		//console.log("SopInstanceUID: " + sopInstanceUID);
		//console.log("NumberOfFrames: " + numberOfFrames);
		//console.log("NumberOfFrames: " + frameRate);
		
		$( "#slider" ).slider({
			range: "min",
			value:0,
			min: 0,
			max: numberOfFrames-1,
			step: 1,
		 	slide: function( event, ui ) {
				 if(w == null){
					 redrawImage(ui.value);					 
				 }
			 }
		});
	
		if(numberOfFrames>1){
			$("#frameRate").hide();
			$( "#frameRateSpinner" ).spinner({
				spin: function( event, ui ) {
					if ( ui.value > numberOfFrames) 
						return false;
					frameRate = ui.value;
					return true;
				}
					}).spinner("value", frameRate);
			$( ".ui-spinner" ).width("40%");
		}else{
			$( "#frameRateSpinner" ).hide();
		}
	
		calcViewerSize();
		
		loadImage(0);
		
		return me;
	}
	
	function redrawImage(frame) {
		//console.log("Redraw: " + frame);

		var context = $("#img")[0].getContext("2d");
		var canvas = $("#img")[0];

		context.clearRect(0, 0, canvas.width, canvas.height);
		context.drawImage(me.images[frame], 0, 0, me.width, me.height);
		current = frame;
		$("#cFrame").text(current);
	 	$("#slider" ).slider( "value", current);
	}
	function setZoomParm(w, h, z) {
		me.width = w;
		me.height = h;
		me.zoom = z;

		$("#zoomLevel").text(me.zoom);
	}

	function resizeViewer(mode) {
		switch (mode) {
		case "original":
			var z = calcMaxZoom(0);
			if(z < 1){
				setZoomParm(me.images[0].width*z, me.images[0].height*z, z);
			}else{
				setZoomParm(me.images[0].width, me.images[0].height, 1);					
			}

			//console.log("NewZoom: " + 1);
			//console.log("NewWidth: " + width);
			//console.log("NewHeight: " + height);
			break;
		case "full":
			var nzoom = calcMaxZoom(0);
			setZoomParm(me.images[0].width * nzoom, me.images[0].height * nzoom, nzoom);

			//console.log("NewZoom: " + zoom);
			//console.log("NewWidth: " + width);
			//console.log("NewHeight: " + height);
			break;
		case "in":
			var maxzoom = calcMaxZoom(0);
			var inc = (maxzoom / 10);
			if ( zoom < maxzoom){
				var z = (Number(zoom) + inc).toFixed(2);		
				if(z > maxzoom)
					z = maxzoom;
				setZoomParm(me.images[0].width * z, me.images[0].height * z, z);
			}

			//console.log("NewZoom: " + zoom);
			//console.log("NewWidth: " + width);
			//console.log("NewHeight: " + height);
			break;
		case "out":
			var maxzoom = calcMaxZoom(0);
			if(maxzoom > 1){
				var inc = (maxzoom / 10);
				if ( zoom > 0+inc){
					var z = (Number(zoom) - inc).toFixed(2);						
					setZoomParm(me.images[0].width * z, me.images[0].height * z, z);
				}
			}
			//console.log("NewZoom: " + zoom);
			//console.log("NewWidth: " + width);
			//console.log("NewHeight: " + height);
			break;
		}


		redrawImage(current);
	}
	
	function drawNextImage(){
		if(current < (numberOfFrames-1))
			redrawImage(current+1);	
		else
			player("stop");
		
	}
	var w = null;
	function player(mode) {
		switch (mode) {
		case "play":
			if(w == null){
				var f = 1000/frameRate;
				//console.log(f);
				//console.log("FrameRate: "+frameRate);
				w = window.setInterval(drawNextImage, f);
			}
			break;
		case "pause":
			window.clearInterval(w);
			w=null;
			break;
		case "stop":
			window.clearInterval(w);
			w=null;
			redrawImage(0);
		case "back":
			if(w == null){
				var i = current - 1;
				if(i >= 0)
					redrawImage(i);
			}
			break;
		case "next":
			if(w == null)
				drawNextImage();
			break;
		}
	}

	function calcViewerSize() {
		var maxWidth = $("#viewerWindowFrame").width();
		var maxHeight = $(window).height() -120;

		//console.log("Viewer Max Width: " + maxWidth);
		//console.log("Viewer Max Height: " + maxHeight);

		$("#img").attr("width", maxWidth);
		$("#img").attr("height", maxHeight);
	}

	function calcMaxZoom(id) {				
		var maxWidth = $("#viewerWindowFrame").width();
		var maxHeight = $(window).height() - 120;
		
		$("#img").attr("width", maxWidth);
		$("#img").attr("height", maxHeight);

		//console.log(images[id]);
		//console.log("Image Width: " + images[id].width);
		//console.log("Image Height: " + images[id].height);

		var maxWidthRatio = maxWidth / me.images[id].width;
		var maxHeightRatio = maxHeight / me.images[id].height;

		var maxzoom;
		//console.log("Max Ratio Width: " + maxWidthRatio);
		//console.log("Max Ratio Width: " + maxHeightRatio);

		if (maxWidthRatio < maxHeightRatio)
			maxzoom = maxWidthRatio;
		else
			maxzoom = maxHeightRatio;

		return maxzoom.toFixed(2);
	}

	

	function loadImage(id) {		
		me.images[id] = new Image;
		me.images[id].src = "dic2png?SOPInstanceUID=" + sopInstanceUID + "&frame="
				+ id;
		
		//console.log("Loading Image: " + id);

		me.images[id].onload = function() {
			if(id < (numberOfFrames-1)){
				loadImage(id+1);
			}
			if(id == 0){
				resizeViewer("original");
				
				redrawImage(0);
			}
			
			var pc = Math.round(100*(id+1)/numberOfFrames);
			if(pc == 100)
				$(".progress").removeClass("active");
			$(".bar").width( pc+"%");
		};
	}
	
	//########## BEHAVIORS #############
	function closeViewer(){
		$(me).trigger("close");
	}
	
</script>
<div class="container-fluid">
	<div class="row-fluid">
		<div class="span2">
			<div class="accordion" id="settings">
				<div class="accordion-group">
					<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse"
							data-parent="#accordion2" href="#collapseOne">Zoom:</a>
					</div>
					<div id="collapseOne" class="accordion-body collapse in">
						<div class="accordion-inner">
							<label id="zoomLBL" for="zoomGrp">Zoom Level: <span id="zoomLevel">1</span>x</label>
							<div class="btn-toolbar">
								<div id="zoomGrp" class="btn-group">
									<a class="btn" href="#" onclick="resizeViewer('original')"><i
										class="icon-resize-small"></i></a> <a class="btn" href="#"
										onclick="resizeViewer('out')"><i class="icon-zoom-out"></i></a>
									<a class="btn" href="#" onclick="resizeViewer('in')"><i
										class="icon-zoom-in"></i></a> <a class="btn" href="#"
										onclick="resizeViewer('full')"><i class="icon-fullscreen"></i></a>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion-group">
					<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse"
							data-parent="#accordion2" href="#collapseTwo">Playback
							Options </a>
					</div>
					<div id="collapseTwo" class="accordion-body collapse">
						<div class="accordion-inner">
							
							<div class="btn-toolbar">
								<div id="zoomGrp" class="btn-group">									
								
									<a class="btn" onclick="player('play')"><i
										class="icon-play"></i></a> <a class="btn"
										onclick="player('pause')"><i class="icon-pause"></i></a> <a
										class="btn" onclick="player('stop')"><i
										class="icon-stop"></i></a> 
								</div>
							</div>	
								
							
							<div class="btn-toolbar">
								<div id="zoomGrp" class="btn-group">
									<a class="btn" onclick="player('back')"><i
										class="icon-step-backward" id="btn-1"></i></a>
									
										<a  class="btn" onclick="player('next')"><i
										class="icon-step-forward"></i></a> 
								</div>
							</div>	
												
							<div id="slider"></div>
						</div>
					</div>
				</div>
				<div class="accordion-group">
					<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse"
							data-parent="#accordion2" href="#collapseThree">Image Information </a>
					</div>
					<div id="collapseThree" class="accordion-body collapse">
						<div class="accordion-inner">
							<label id="asd">Number of Frames: <span id="nFrames"></span></label>
							<label>Current Frame: <span id="cFrame"></span></label>
							<label>Frame Rate: <span id="frameRate"></span><input id="frameRateSpinner" style="width: 25%" min="1" value="0" name="value"/></label>
						</div>
					</div>
				</div>
				<div class="accordion-group">
					<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse"
							data-parent="#accordion2" href="#collapseFour">Loading... </a>
					</div>
					<div id="collapseFour" class="accordion-body collapse in">
						<div class="accordion-inner">
							
						</div>
					</div>
				</div>
				<div class="accordion-group">
					<div class="accordion-heading">
						<a class="accordion-toggle" data-toggle="collapse"
							data-parent="#accordion2" href="#collapseFive">Exit:</a>
					</div>
					<div id="collapseFive" class="accordion-body collapse in"> 
						<div class="accordion-inner">
							<div class="btn-group">	
								<a class="btn btn-warning btn-small" onclick="closeViewer()"><i
									class=" icon-chevron-left"></i>Back to Search</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="viewerWindowFrame" class="span10">
			<canvas id="img">Cannot Render Image</canvas>
		</div>
	</div>
</div>
